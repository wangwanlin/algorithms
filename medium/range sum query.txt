Given an integer array nums, find the sum of the elements between indices i and j (i ¡Ü j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8

Segment tree is a very flexible data structure,
 because it is used to solve numerous range query problems like finding minimum, maximum, sum, 
greatest common divisor, least common denominator in array in logarithmic time.
1. Build a segment tree
      Use an array where a[i]=a[i*2] + a[i*2+1]; so a[tail] is the original array.
2. Update a segment tree
      When update a node, need to update all the association nodes.Use iteration to update, recurrive
  is also ok. 
      pos += n;
      tree[pos] = val;   // update bottom.
       while(pos>0){ 
               int left = pos; 
               int right = pos;
               if(pos%2==0){ right = pos+1;   }else{ left = pos - 1; }   // ensure left and right node
               tree[pos/2] = tree[left] + tree[right];  // update parent;
               pos = pos / 2 ;      // itreate updaing;
       }
3.Range Sum Query 
       First, add n to each parameter. 
       int sum = 0;
       while(l<=r){    // left < right
           if(l%2==1){ sum += tree[l] l++; }   //  when l is odd, singlely add this node
           if(r %2 ==0) { sum+= tree[r]  r--; }  // when r is even, singlely add this node
           l /= 2;
           r /= 2;
       }
       return sum;
     
