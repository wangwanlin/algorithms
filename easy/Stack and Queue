  
STACK Methods 
Modifier and Type	Method and Description
boolean	empty()
Tests if this stack is empty.
E	peek()
Looks at the object at the top of this stack without removing it from the stack.
E	pop()
Removes the object at the top of this stack and returns that object as the value of this function.
E	push(E item)
Pushes an item onto the top of this stack.
int	search(Object o)
Returns the 1-based position where an object is on this stack.


QUEUE Methods 
Modifier and Type	Method and Description
boolean	add(E e)
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
E	element()
Retrieves, but does not remove, the head of this queue.
boolean	offer(E e)
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.
E	peek()
Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
E	poll()
Retrieves and removes the head of this queue, or returns null if this queue is empty.
E	remove()
Retrieves and removes the head of this queue.





Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.

class MyQueue {
    private Stack s1 = new Stack();
    private Stack s2 = new Stack();
    private int front; 
    // Push element x to the back of queue.
    public void push(int x) {
        if(s1.empty()){
            s1.push(x);
            front = x;
        }else{
             while(!s1.isEmpty()){
               s2.push(s1.pop());
             }
             s2.push(x);
             while(!s2.empty()){
                 s1.push(s2.pop());
             }
        }
       
        
         
    }

    // Removes the element from in front of queue.
    public void pop() {
       s1.pop();
       if (!s1.empty())
        front = (int)s1.peek();  
    }

    // Get the front element.
    public int peek() {
        return front;
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return s1.empty();
    }
}
